# handlers/profile.py

from aiogram import Router, F
from aiogram.types import CallbackQuery
from keyboards import after_register_keyboard, back_to_main_keyboard, start_keyboard
from database import get_user, update_user
from utils.db_fsm import DBFSM
from handlers.register import States

router = Router()

async def edit_or_send(bot, user_id, text, reply_markup=None):
    user = await get_user(user_id)
    message_id = user[7]  # –ø–æ–ª–µ message_id
    if message_id:
        try:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup
            )
        except Exception:
            msg = await bot.send_message(user_id, text=text, reply_markup=reply_markup)
            await update_user(user_id, "message_id", msg.message_id)
    else:
        msg = await bot.send_message(user_id, text=text, reply_markup=reply_markup)
        await update_user(user_id, "message_id", msg.message_id)

def format_field_single(value: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if not value or value.strip() == "":
        return "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ üö´"
    return value.strip()

def format_field_dynamic(label: str, value: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å –ø–æ–¥–ø–∏—Å—å—é"""
    if not value or value.strip() == "":
        return f"{label}: –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ üö´"
    items = [v.strip() for v in value.split(",") if v.strip()]
    if len(items) == 1:
        return f"{label}: {items[0]}"  # –û–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –≤ —Å—Ç—Ä–æ–∫—É
    else:
        formatted_items = "\n".join(f"- {item}" for item in items)
        return f"{label}:\n{formatted_items}"  # –ú–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π ‚Äî —Å–ø–∏—Å–æ–∫

@router.callback_query(F.data == "view_profile")
async def view_profile(callback: CallbackQuery):
    await DBFSM.set_state(callback.from_user.id, States.PROFILE)
    user = await get_user(callback.from_user.id)
    if user:
        name = format_field_single(user[1])
        psn_id = format_field_single(user[2])
        platform = format_field_single(user[3])
        modes = format_field_dynamic("üïπÔ∏è –†–µ–∂–∏–º—ã", user[4])
        goals = format_field_dynamic("üéØ –¶–µ–ª–∏", user[5])
        levels = format_field_dynamic("üèÜ –°–ª–æ–∂–Ω–æ—Å—Ç–∏", user[6])

        profile_text = (
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üßë –ò–º—è: {name}\n"
            f"üéÆ PSN: {psn_id}\n"
            f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n"
            f"{modes}\n"
            f"{goals}\n"
            f"{levels}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )

        await edit_or_send(callback.bot, callback.from_user.id, profile_text, reply_markup=back_to_main_keyboard())
    else:
        await edit_or_send(callback.bot, callback.from_user.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_main_keyboard())
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await DBFSM.set_state(callback.from_user.id, States.COMPLETE)
    await edit_or_send(callback.bot, callback.from_user.id, "–°–ø–∞—Å–∏–±–æ, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!", reply_markup=after_register_keyboard())
    await callback.answer()

@router.callback_query(F.data == "start_over")
async def start_over(callback: CallbackQuery):
    await DBFSM.set_state(callback.from_user.id, States.START)
    await edit_or_send(callback.bot, callback.from_user.id,
                       "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ Tsushima.ru, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.",
                       reply_markup=start_keyboard())
    await callback.answer()
